{"version":3,"sources":["webpack://SpringSDK/webpack/universalModuleDefinition","webpack://SpringSDK/webpack/bootstrap","webpack://SpringSDK/./wwwroot/SDK/Authentication/APIUserAuthentication.ts","webpack://SpringSDK/./wwwroot/SDK/Requests/FolderRequest.ts","webpack://SpringSDK/./wwwroot/SDK/Service/NodeHttpRequest.ts","webpack://SpringSDK/./wwwroot/SDK/Service/NodeSpringCMService.ts","webpack://SpringSDK/./wwwroot/SDK/Service/RequestorFactory.ts","webpack://SpringSDK/./wwwroot/SDK/Service/SpringCMService.ts","webpack://SpringSDK/./wwwroot/SDK/Service/validator.ts","webpack://SpringSDK/external \"request-promise-native\""],"names":[],"mappings":"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","file":"SpringSDKNode.bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SpringSDK\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SpringSDK\"] = factory();\n\telse\n\t\troot[\"SpringSDK\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { IAuthenticator} from './IAuthentication'\r\nimport { IHttpRequestor } from '../Service/IHttpRequest';\r\nimport { TokenRequest } from '../Model/Token';\r\nimport { RequestorFactory } from '../Service/RequestorFactory';\r\n\r\n\r\n    export class APIUserAuthenticator implements IAuthenticator {\r\n        \r\n        public constructor(clientID: string, clientSecret: string, authUrl: string) {\r\n            this._clientId = clientID;\r\n            this._clientSecret = clientSecret;\r\n            this._authUrl = authUrl;\r\n        }\r\n\r\n        private _clientId: string;\r\n\r\n        private _clientSecret: string;\r\n\r\n        private _authUrl: string;\r\n\r\n        private _tokenRequest: TokenRequest;\r\n\r\n        public  AccessToken = (): Promise<string>=> {\r\n\r\n            var p = new Promise<string>((res, rej) => {\r\n                if (((this._tokenRequest == null)\r\n                    || (new Date() > this.TokenExpiration))) {\r\n                    this.GetNewToken().then((token) => {  res(token.access_token) }).catch(rej);\r\n                } else {\r\n\r\n                    res(this._tokenRequest.access_token);\r\n                }\r\n            });\r\n            return p;\r\n\r\n        }\r\n\r\n        public TokenExpiration: Date;\r\n\r\n        public LastTokenRequest: Date\r\n        public GetNewToken = (): Promise<TokenRequest> => {\r\n            var body = {\"client_id\": this._clientId,\"client_secret\": this._clientSecret};\r\n            //console.log(body);\r\n            var p = new Promise<TokenRequest>((res, rej) => {\r\n                let req: IHttpRequestor = RequestorFactory.GetRequestor(null);\r\n                let resp = req.Post<TokenRequest>(this._authUrl, body, { \"Authorization\":\"\"}).then(\r\n                    (data: TokenRequest) => {\r\n                        \r\n                        this._tokenRequest = data;\r\n                        this.LastTokenRequest = new Date();\r\n                        res(this._tokenRequest);\r\n                    }).catch(rej);\r\n\r\n\r\n            })\r\n            return p;\r\n        }\r\n    }\r\n","import { SpringCMServiceBase } from \"../Service/SpringCMService\";\r\nimport { Folder } from \"../Model/Folder\";\r\nimport { SpringCMItem } from \"../Model/SpringCMItem\";\r\n\r\nexport class FolderRequest {\r\n\r\n    private _id: string;\r\n\r\n    private _path: string;\r\n\r\n    private _scmsvc: SpringCMServiceBase;\r\n\r\n    private _folder: Folder;\r\n\r\n    private _expandParentFolder: boolean;\r\n\r\n    private _expandDocuments: boolean;\r\n\r\n    private _expandFolders: boolean;\r\n\r\n    private _expandPath: boolean;\r\n\r\n    private _expandEosParentInfo: boolean;\r\n\r\n    private _expandEosInfo: boolean;\r\n\r\n    private _expandShareLinks: boolean;\r\n\r\n    private _expandAttributeGroups: boolean;\r\n\r\n    private _expandSecurity: boolean;\r\n\r\n\r\n\r\n    set ExpandDocuments(value: boolean) {\r\n        if ((this._expandDocuments != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandDocuments(): boolean {\r\n\r\n        return this._expandDocuments;\r\n    }\r\n\r\n    set ExpandFolders(value: boolean) {\r\n        if ((this._expandFolders != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandFolders(): boolean {\r\n\r\n        return this._expandFolders\r\n    }\r\n    set ExpandPath(value: boolean) {\r\n        if ((this._expandPath != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandPath(): boolean {\r\n\r\n        return this._expandPath;\r\n    }\r\n    set ExpandEosParentInfo(value: boolean) {\r\n        if ((this._expandEosParentInfo != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandEosParentInfo(): boolean {\r\n\r\n        return this._expandEosParentInfo;\r\n    }\r\n    set ExpandEosInfo(value: boolean) {\r\n        if ((this._expandEosInfo != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandEosInfo(): boolean {\r\n\r\n        return this._expandEosInfo;\r\n    }\r\n    set ExpandShareLinks(value: boolean) {\r\n        if ((this._expandShareLinks != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandShareLinks(): boolean {\r\n\r\n        return this._expandShareLinks;\r\n    }\r\n    set ExpandAttributeGroups(value: boolean) {\r\n        if ((this._expandAttributeGroups != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandAttributeGroups(): boolean {\r\n\r\n        return this._expandAttributeGroups;\r\n    }\r\n    set ExpandSecurity(value: boolean) {\r\n        if ((this._expandSecurity != value)) {\r\n            this._folder = undefined;\r\n        }\r\n    }\r\n    get ExpandSecurity(): boolean {\r\n\r\n        return this._expandSecurity;\r\n    }\r\n    constructor(svc: SpringCMServiceBase, folderId: string, path: string, folder: Folder) {\r\n        this._id = folderId;\r\n        this._scmsvc = svc;\r\n        this._folder = folder;\r\n        this._path = path;\r\n    }\r\n\r\n\r\n\r\n    public get Folder(): Promise<Folder> {\r\n        var p = new Promise<Folder>((res, rej) => {\r\n            if ((this._folder != null)) {\r\n                this._id = this._scmsvc.getIDfromHref(this._folder.Href);\r\n                res(this._folder);\r\n                //return;\r\n            }\r\n            if (this._path != undefined) {\r\n                this._scmsvc.Requestor.Get<Folder>(`${this._scmsvc.GetObjectAPIUrl}/folders?path=${encodeURI(this._path)}&${this.ExpandFolder()}`).then((fol) => {\r\n                    this._folder = fol;\r\n                    this._id = this._scmsvc.getIDfromHref(this._folder.Href);\r\n                    res(this._folder);\r\n                });\r\n                //return _folder;\r\n            }\r\n            if ((this._id != undefined)) {\r\n                this._scmsvc.Requestor.Get<Folder>(`${this._scmsvc.GetObjectAPIUrl}/folders/${this._id}?${this.ExpandFolder()}`).then((fol) => {\r\n\r\n                    this._folder = fol;\r\n                    //this.id = this._scmsvc.getIDfromHref(this._folder.Href);\r\n                    return\r\n                })\r\n\r\n            }\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n        return p;\r\n    }\r\n\r\n    //public GetAllSubfolders(): Promise<Array<FolderRequest>> {\r\n\r\n    //    var p = new Promise<Array<FolderRequest>>((res, rej) => {\r\n\r\n    //        this.Folder.then((folder) => {\r\n    //            let res = this._scmsvc.Requestor.Get<SpringCMItem<Folder>>(`${folder.Href}/folders?limit=${this._scmsvc.DefaultQueryBatch}`).then((folders) => {\r\n\r\n    //                var frs:Array<FolderRequest> = [];\r\n    //                for (var i = 0; i < folders.Items.length;i++) {\r\n    //                    frs.push(new FolderRequest(this._scmsvc, undefined, undefined, folders.Items[i]));\r\n    //                }\r\n\r\n    //                if ((folders.Items.length < folders.Total)) {\r\n    //                    while ((folders.Next != undefined)) {\r\n    //                        folders = this._scmsvc.Requestor.Get<SpringCMItem<Folder>>(`${folders.Next}`);\r\n    //                        lst.AddRange(res.Items.Select(() => { }, new FolderRequest(a, _scmsvc)));\r\n    //                    }\r\n\r\n    //                }\r\n\r\n    //                return lst;\r\n\r\n    //            })\r\n\r\n\r\n\r\n    //        })\r\n\r\n\r\n    //    })\r\n\r\n    //}\r\n\r\n    //public UploadDocument(file: System.IO.Stream, FileName: string): Task < DocumentRequest > {\r\n    //                                    return this._scmsvc.UploadDocument(this.Folder, file, FileName);\r\n    //                                }\r\n\r\n    //public Delete(): Task < Folder > {\r\n    //                                    return this._scmsvc.DeleteFolder(this.Folder);\r\n    //                                }\r\n\r\n    //public CreateSubfolder(name: string): Task < FolderRequest > {\r\n    //                                    let fol = [][\r\n    //                                        Name = name,\r\n    //                                        ParentFolder = this.Folder];\r\n    //                                    return _scmsvc.CreateFolder(fol);\r\n    //                                }\r\n\r\n    //public GetAllDocuments(): Task < List < DocumentRequest >> {\r\n    //                                    let res = ((this._scmsvc.requestor.Get\r\n    //                                        < (SpringCMItem < Document))\r\n    //                                        + \"{Folder.Href}/documents?limit={_scmsvc.DefaultQueryBatch}&{ExpandFolder()}\");\r\n    //                                    let lst = res.Items.Select(() => { }, new DocumentRequest(a, _scmsvc)).ToList();\r\n    //                                    if((res.Items.Count < res.Total)) {\r\n    //                                    while ((res.Next != null)) {\r\n    //                                        res = ((this._scmsvc.requestor.Get\r\n    //                                            < (SpringCMItem < Document))\r\n    //                                            + \"{res.Next}\");\r\n    //                                        lst.AddRange(res.Items.Select(() => { }, new DocumentRequest(a, _scmsvc)));\r\n    //                                    }\r\n\r\n    //                                }\r\n\r\n    //                                return lst;\r\n    //                            }\r\n\r\n    private ExpandFolder(): String {\r\n        let expandString: Array<String> = [];\r\n        if (this._expandParentFolder) {\r\n            expandString.push(\"ParentFolder\");\r\n        }\r\n\r\n        if (this._expandDocuments) {\r\n            expandString.push(\"Documents\");\r\n        }\r\n\r\n        if (this._expandFolders) {\r\n            expandString.push(\"Folders\");\r\n        }\r\n\r\n        if (this._expandPath) {\r\n            expandString.push(\"Path\");\r\n        }\r\n\r\n        if (this._expandEosParentInfo) {\r\n            expandString.push(\"EosParentInfo\");\r\n        }\r\n\r\n        if (this._expandEosInfo) {\r\n            expandString.push(\"Eosinfo\");\r\n        }\r\n\r\n        if (this._expandShareLinks) {\r\n            expandString.push(\"ShareLinks\");\r\n        }\r\n\r\n        if (this._expandAttributeGroups) {\r\n            expandString.push(\"AttributeGroups\");\r\n        }\r\n\r\n        if (this._expandSecurity) {\r\n            expandString.push(\"Security\");\r\n        }\r\n\r\n        if ((expandString.length == 0)) {\r\n            return \"\";\r\n        }\r\n\r\n        return `expand=${expandString.join(',')}`;\r\n\r\n    }\r\n}","import { IHttpRequestor } from \"./IHttpRequest\";\r\nimport * as req from \"request-promise-native\"\r\nimport { IAuthenticator } from \"../Authentication/IAuthentication\";\r\n\r\n\r\n\r\nexport class NodeHttpRequest implements IHttpRequestor {\r\n    \r\n  \r\n\r\n    constructor(auth: IAuthenticator) {\r\n        this.Authenticator = auth;\r\n    }\r\n    public Authenticator: IAuthenticator;\r\n\r\n    \r\n    public Put<T>(url: string, body: any, headers?: any): Promise<T>  {\r\n        var p = new Promise<T>((res, rej) => {\r\n            this.getHeader(headers).then((populatedHeaders) => {\r\n                req.put(url, { headers: populatedHeaders, body: JSON.stringify(body) }).promise().then((myObj) => {\r\n                    res(JSON.parse(myObj));\r\n                },rej);\r\n            }, rej)\r\n            \r\n        })\r\n        return p;\r\n    }\r\n\r\n    public Post<T>(url: string, body: any, headers?: any): Promise<T> {\r\n        var p = new Promise<T>((res, rej) => {\r\n            this.getHeader(headers).then((populatedHeaders) => {\r\n                req.post(url, { headers: populatedHeaders, body: JSON.stringify(body) }).promise().then((myObj) => {\r\n                    res(JSON.parse(myObj));\r\n                }, rej);\r\n            }, rej)\r\n\r\n        })\r\n        return p;\r\n    }\r\n\r\n    public Get = <T>(url: string, headers: any = undefined): Promise<T> => {\r\n        var p = new Promise<T>((res, rej) => {\r\n            this.getHeader(headers).then((populatedHeaders) => {\r\n                //console.log(populatedHeaders);\r\n                req.get(url, { headers: populatedHeaders }).promise().then((myObj) => {\r\n                    //console.log(myObj);\r\n                    res(JSON.parse(myObj));\r\n                }, rej);\r\n            }, rej)\r\n\r\n        })\r\n        return p;\r\n       \r\n        \r\n    }\r\n    public Delete = <T>(url: string, headers: any = undefined): Promise<T> => {\r\n\r\n        var p = new Promise<T>((res, rej) => {\r\n            this.getHeader(headers).then((populatedHeaders) => {\r\n                req.delete(url, { headers: populatedHeaders }).promise().then((myObj) => {\r\n                    res(JSON.parse(myObj));\r\n                }, rej);\r\n            }, rej)\r\n\r\n        })\r\n        return p;\r\n        \r\n        \r\n    }\r\n    public Patch = <T>(url: string, body: any, headers: any = undefined): Promise<T> => {\r\n        var p = new Promise<T>((res, rej) => {\r\n            this.getHeader(headers).then((populatedHeaders) => {\r\n                req.patch(url, { headers: populatedHeaders, body: JSON.stringify(body) }).promise().then((myObj) => {\r\n                    res(JSON.parse(myObj));\r\n                }, rej);\r\n            }, rej)\r\n\r\n        })\r\n        return p;\r\n        \r\n        \r\n    }\r\n    public MakeCall = <T>(url: string, body: any, headers: any, method: string): Promise<T>=> {\r\n\r\n        var p = new Promise<T>((res, rej) => {\r\n            this.getHeader(headers).then((populatedHeaders) => {\r\n                req.get(url, { headers: populatedHeaders, method: method }).promise().then((myObj) => {\r\n                    res(JSON.parse(myObj));\r\n                }, rej);\r\n            }, rej)\r\n\r\n        })\r\n        return p;\r\n        \r\n        \r\n    };\r\n    public getHeader = (currentHeader:any[]):Promise<any[]> => {\r\n\r\n        if (currentHeader == undefined) {\r\n            currentHeader = [];\r\n        }\r\n\r\n        if (currentHeader[\"accept\"] == undefined) {\r\n            currentHeader[\"accept\"] = \"application/json\";\r\n        }\r\n        if (currentHeader[\"Content-Type\"] == undefined) {\r\n            currentHeader[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        //console.log(currentHeader);\r\n        var p = new Promise<any[]>((res, rej) => {\r\n           \r\n            if (currentHeader[\"Authorization\"] == undefined) {\r\n               // console.log(\"Authorization is not already set\");\r\n                this.Authenticator.AccessToken().then((token) => {\r\n\r\n                    currentHeader[\"Authorization\"] = `bearer ${token}`;\r\n                    res(currentHeader);\r\n                },rej);\r\n            }\r\n            else {\r\n            //  console.log(\"Authorization is already set\");\r\n                res(currentHeader);\r\n            }\r\n        })\r\n        return p;\r\n        \r\n    }\r\n}","import { SpringCMServiceBase } from \"./SpringCMService\";\r\nimport { RequestorFactory } from \"./RequestorFactory\";\r\nimport { IAuthenticator } from \"../Authentication/IAuthentication\";\r\nexport { APIUserAuthenticator } from \"../Authentication/APIUserAuthentication\"\r\n\r\n\r\nexport class SpringCMService extends SpringCMServiceBase {\r\n\r\n\r\n    public constructor(auth: IAuthenticator, datacenter: string) {\r\n        super(auth, datacenter);\r\n        this.Requestor = RequestorFactory.GetRequestor(auth);\r\n        \r\n    }\r\n}","import { IHttpRequestor } from \"./IHttpRequest\";\r\nimport { BrowserHttpRequest } from \"./BrowserHttpRequest\";\r\n//import { EformHttpRequest } from \"./EformHttpRequest\";\r\nimport { NodeHttpRequest } from \"./NodeHttpRequest\";\r\nimport { IAuthenticator } from \"../Authentication/IAuthentication\";\r\ndeclare var SpringCM: any;\r\nexport class RequestorFactory {\r\n    \r\n    public static GetRequestor = (auth: IAuthenticator): IHttpRequestor => {\r\n       // if (typeof window === 'undefined') {\r\n            \r\n            return new NodeHttpRequest(auth);\r\n\r\n        //}\r\n        //else {\r\n        //    if (SpringCM.API != undefined) {\r\n                \r\n        //        //return new EformHttpRequest();\r\n        //    }\r\n        //    else {\r\n        //       return new BrowserHttpRequest(auth);\r\n        //    }\r\n\r\n        //    return null;\r\n\r\n        //}\r\n    }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n","import { IAuthenticator } from \"../Authentication/IAuthentication\";\r\n\r\nimport { IHttpRequestor } from \"./IHttpRequest\";\r\nimport { Account } from \"../Model/Account\";\r\nimport { SpringCMItem } from \"../Model/SpringCMItem\";\r\nimport { AttributeGroups } from \"../Model/AttributeGroup\";\r\nimport { DocLauncher } from \"../Model/DocLauncher\";\r\nimport { PermissionSet } from \"../Model/PermissionSet\";\r\nimport { DocLauncherTask } from \"../Model/DocLauncherTask\";\r\nimport { Contacts } from \"../Model/Contacts\";\r\nimport { Workflow } from \"../Model/Workflow\";\r\nimport { WorkflowQueue } from \"../Model/WorkflowQueue\";\r\nimport { WorkItem } from \"../Model/WorkItem\";\r\nimport { Validator } from \"./validator\";\r\nimport { StaticTokenAuthenication } from \"../Authentication/StaticTokenAuthentication\";\r\nimport { APIUserAuthenticator } from \"../Authentication/APIUserAuthentication\";\r\nimport { FolderRequest } from \"../Requests/FolderRequest\";\r\nimport { Folder } from \"../Model/Folder\";\r\n\r\n\r\n\r\nexport class SpringCMServiceBase {\r\n\r\n    public DefaultQueryBatch: number;\r\n\r\n    public constructor(auth: IAuthenticator, datacenter: string) {\r\n       \r\n        this.Datacenter = datacenter;\r\n        this.GetObjectAPIUrl = `https://api${this.Datacenter}.springcm.com/${this.ApplicationVersion}`;\r\n        this.GetDownloadAPIUrl = `https://apiupload${this.Datacenter}.springcm.com/${this.ApplicationVersion}`;\r\n        this.GetDownloadAPIUrl = `https://apidownload${this.Datacenter}.springcm.com/${this.ApplicationVersion}`;\r\n    }\r\n\r\n    public ApplicationVersion: string =  \"v201411\";\r\n\r\n    private Datacenter: string\r\n\r\n\r\n    public GetObjectAPIUrl: string;\r\n\r\n    public  GetUploadAPIUrl: string;\r\n\r\n    public  GetDownloadAPIUrl: string;\r\n\r\n    public Requestor: IHttpRequestor\r\n\r\n    public GetCurrentAccount(): Promise<Account> {\r\n        return this.Requestor.Get<Account>(`${this.GetObjectAPIUrl}/accounts/current`);\r\n    }\r\n\r\n        public UpdateAccount(act: Account): Promise<Account> {\r\n            return this.Requestor.Patch<Account>(act.Href,act);\r\n        }\r\n\r\n        public GetCurrentAccountAttributeGroups(): Promise<SpringCMItem<AttributeGroups>> {\r\n            return this.Requestor.Get<SpringCMItem<AttributeGroups>>( `${this.GetObjectAPIUrl}/accounts/current/attributegroups`);\r\n            \r\n        }\r\n\r\n    //    public QueryNext(springCMItem: SpringCMItem<T>): Promise<SpringCMItem<T>> {\r\n    //        return ((this.requestor.Get\r\n    //            < (SpringCMItem < T))\r\n    //            + \"{springCMItem.Next}\");\r\n    //    }\r\n\r\n        public GetAllDocLauncherConfigs(): Promise<SpringCMItem<DocLauncher>> {\r\n            return this.Requestor.Get<SpringCMItem < DocLauncher>>(`${this.GetObjectAPIUrl}/doclauncherconfigurations`);\r\n        }\r\n\r\n        public GetAllPermissionSets(): Promise<SpringCMItem<PermissionSet>> {\r\n            return this.Requestor.Get<SpringCMItem<PermissionSet>>(`${this.GetObjectAPIUrl}/permissionsets`);\r\n        }\r\n\r\n        public GetDocLauncherTask(IdorHref: string): Promise<DocLauncherTask> {\r\n            let href = IdorHref;\r\n\t\t\tif (Validator.isUUID(IdorHref)) {\r\n\t\t\t\thref = `${this.GetObjectAPIUrl}/doclauncherTasks/${IdorHref}`;\r\n            }\r\n\r\n            return this.Requestor.Get<DocLauncherTask>(href);\r\n        }\r\n\r\n\t\tpublic CreateDocLauncherTask(DocLauncherTask: DocLauncherTask): Promise<DocLauncherTask> {\r\n\t\t\treturn this.Requestor.Post<DocLauncherTask>(`${this.GetObjectAPIUrl}/DocLauncherTasks`, DocLauncherTask);\r\n\t\t\t}\r\n\r\n        public GetAllContacts(): Promise<SpringCMItem<Contacts>> {\r\n            return this.Requestor.Get<SpringCMItem<Contacts>>(`${this.GetObjectAPIUrl}/contacts`);\r\n        }\r\n\r\n        public GetContactById(Id: string): Promise<Contacts> {\r\n            return this.Requestor.Get<Contacts>(`${this.GetObjectAPIUrl}/contacts/{Id}`);\r\n        }\r\n\r\n        public CreateContact(contact: Contacts): Promise<Contacts> {\r\n            return this.Requestor.Post<Contacts>(`${this.GetObjectAPIUrl}/contacts/`, contact);\r\n        }\r\n\r\n        public UpdateContact(contact: Contacts): Promise<Contacts> {\r\n            return this.Requestor.Put<Contacts>(contact.Href, contact);\r\n        }\r\n\r\n        public DeleteContact(contact: Contacts): Promise<Contacts> {\r\n            return this.Requestor.Delete<Contacts>(contact.Href);\r\n        }\r\n\r\n        public GetWorkflow(IdorHref: string): Promise<Workflow> {\r\n\t\t\tlet href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workflows/${IdorHref}`;\r\n            }\r\n\r\n            return this.Requestor.Get<Workflow>(href);\r\n        }\r\n\r\n        public StartWorkflow(workflow: Workflow): Promise<Workflow> {\r\n            return this.Requestor.Post<Workflow>(`${this.GetObjectAPIUrl}/workflows/`, (workflow));\r\n        }\r\n\r\n        public SignalWorkflow(workflow: Workflow, data: string): Promise<Workflow> {\r\n            return this.Requestor.Post<Workflow>(`${workflow.Href}/signal`, `{\"data\":\"${data}\" }`);\r\n        }\r\n\r\n        public DeleteWorkflow(workflow: Workflow): Promise<Workflow> {\r\n            return this.Requestor.Delete<Workflow>(workflow.Href);\r\n        }\r\n\r\n        public GetWorkflowQueue(IdorHref: string): Promise<SpringCMItem<WorkflowQueue>> {\r\n   //         let id: Guid;\r\n            let href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workflowqueues/${IdorHref}`;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        public GetWorkflowQueueWorkItems(IdorHref: string): Promise<SpringCMItem<WorkItem>> {\r\n   //         let id: Guid;\r\n            let href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workflowqueues/${IdorHref}/workitems`;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        public GetWorkItem(IdorHref: string, assignee: boolean = false, documents: boolean = false, assigneeInstructions: boolean = false, workflow: boolean = false, selections: boolean = false): Promise<WorkItem> {\r\n    //        let id: Guid;\r\n            let href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workitems/${IdorHref}`;\r\n            }\r\n\r\n            let expandString: Array<String> = [];\r\n            if (assignee) {\r\n                expandString.push(\"Assignee\");\r\n            }\r\n\r\n            if (documents) {\r\n                expandString.push(\"Documents\");\r\n            }\r\n\r\n            if (assigneeInstructions) {\r\n                expandString.push(\"AssigneeInstructions\");\r\n            }\r\n\r\n            if (workflow) {\r\n                expandString.push(\"Workflow\");\r\n            }\r\n\r\n            if (selections) {\r\n                expandString.push(\"Selections\");\r\n            }\r\n\r\n            if ((expandString.length == 0)) {\r\n                return this.Requestor.Get<WorkItem>(href);\r\n            }\r\n            let expand = `expand=${expandString.join(',')}`;\r\n            return this.Requestor.Get<WorkItem>(`${href}?expand=${expand}`);\r\n            \r\n        };\r\n              \r\n    //        ///  <summary>\r\n    //        ///  Method accepts an ID or an HREF\r\n    //        ///  Brings back documents assigned to a user via SpringCM Promise\r\n    //        ///  </summary>\r\n    //        ///  <param name=\"IdorHref\"></param>\r\n    //        ///  <returns>Returns a list of documents associated to the Promises assigned to a user</returns>\r\n    //        public GetWorkItemDocuments(IdorHref: string): Promise < SpringCMItem < Document >> {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/workitems/{IdorHref}/documents\";\r\n    //}\r\n\r\n    //return ((this.requestor.Get\r\n    //    < (SpringCMItem < Document))\r\n    //    + \"{href}\");\r\n    //        }\r\n\r\n    //        ///  <summary>\r\n    //        ///   Method accepts an ID or an HREF\r\n    //        ///   Currently this method does not work but may in the future.\r\n    //        ///  </summary>\r\n    //        ///  <param name=\"workitem\"></param>\r\n    //        ///  <param name=\"IdorHref\"></param>\r\n    //        ///  <returns></returns>\r\n    //        public UpdateWorkitem(workitem: WorkItem, IdorHref: string): Promise < WorkItem > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/workitems/{IdorHref}\";\r\n    //}\r\n\r\n    //return this.requestor.Patch<WorkItem>(\"{href}\", (workitem));\r\n    //        }\r\n\r\n    //        public GetDocumentReminder(IdorHref: string): Promise < DocumentReminder > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/DocumentReminders/{id}\";\r\n    //}\r\n\r\n    //return this.requestor.Get<DocumentReminder>((href + \"?expand=Documents,RecipientUsers,RecipientGroups\"));\r\n    //        }\r\n\r\n    //        public CreateDocumentReminder(documentReminder: DocumentReminder): Promise < DocumentReminder > {\r\n    //    return this.requestor.Post<DocumentReminder>(\"{GetObjectAPIUrl}/DocumentReminders/\", (documentReminder));\r\n    //}\r\n\r\n    //        public UpdateDocumentReminder(documentReminder: DocumentReminder): Promise < DocumentReminder > {\r\n    //    return this.requestor.Put<DocumentReminder>(documentReminder.Href, (documentReminder));\r\n    //}\r\n\r\n    //        public DeleteDocumentReminder(documentReminder: DocumentReminder): Promise < DocumentReminder > {\r\n    //    return this.requestor.Delete<DocumentReminder>(documentReminder.Href);\r\n    //}\r\n\r\n    //        public GetGroup(IdorHref: string, loadGroupMembers: boolean = false): Promise < Group > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    let expand = \"\";\r\n    //    if(loadGroupMembers) {\r\n    //        expand = \"?expand=GroupMembers\";\r\n    //    }\r\n\r\n    //            if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/Groups/{IdorHref}{expand}\";\r\n    //}\r\n\r\n    //return this.requestor.Get<Group>(href);\r\n    //        }\r\n\r\n    //        public GetGroupMembers(IdorHref: string): Promise < SpringCMItem < User >> {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/Groups/{IdorHref}\";\r\n    //}\r\n\r\n    //return ((this.requestor.Get\r\n    //    < (SpringCMItem < User))\r\n    //    + \"{href}/groupmembers\");\r\n    //        }\r\n\r\n    //        public CreateGroup(group: Group): Promise < Group > {\r\n    //    return this.requestor.Post<Group>(\"{GetObjectAPIUrl}/groups/\", (group));\r\n    //}\r\n\r\n    //        public UpdateGroup(group: Group, overwriteMembers: boolean = false): Promise < Group > {\r\n    //    if(overwriteMembers) {\r\n    //        return this.requestor.Put<Group>(\"{group.Href}\", (group));\r\n    //    }\r\n\r\n    //            return this.requestor.Patch<Group>(\"{group.Href}\", (group));\r\n    //}\r\n\r\n    //        public DeleteGroup(group: Group): Promise < Group > {\r\n    //    return this.requestor.Delete<Group>(group.Href);\r\n    //}\r\n\r\n    //        public GetCurrentUser(): Promise < UserRequest > {\r\n    //    return new UserRequest(this.requestor.Get<User>(\"{GetObjectAPIUrl}/Users/Current\"), this);\r\n    //}\r\n\r\n    //        public GetAllUsers(): Promise < List < UserRequest >> {\r\n    //    let users = ((this.requestor.Get\r\n    //        < (List < User))\r\n    //        + \"{GetObjectAPIUrl}/Users/\");\r\n    //    return users.Select(() => { }, new UserRequest(a, this)).ToList();\r\n    //}\r\n\r\n    //        public CreateUser(user: UserRequest): Promise < UserRequest > {\r\n    //    return this.CreateUser(user.User);\r\n    //}\r\n\r\n    //        public CreateUser(user: User): Promise < UserRequest > {\r\n    //    return new UserRequest(this.requestor.Post<User>(\"{GetObjectAPIUrl}/users/\", (user)), this);\r\n    //}\r\n\r\n    //        public DeleteUser(user: UserRequest): Promise < User > {\r\n    //    return this.DeleteUser(user.User);\r\n    //}\r\n\r\n    //        public DeleteUser(user: User): Promise < User > {\r\n    //    return this.requestor.Delete<User>(user.Href);\r\n    //}\r\n\r\n    //        public GetUser(IdorHref: string): Promise < UserRequest > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/users/{IdorHref}\";\r\n    //}\r\n\r\n    //return new UserRequest(this.requestor.Get<User>(href), this);\r\n    //        }\r\n\r\n    //        public UpdateUser(user: UserRequest, overwriteGroups: boolean = false): Promise < UserRequest > {\r\n    //    return this.UpdateUser(user.User, overwriteGroups);\r\n    //}\r\n\r\n    //        public UpdateUser(user: User, overwriteGroups: boolean = false): Promise < UserRequest > {\r\n    //    if(overwriteGroups) {\r\n    //        return new UserRequest(this.requestor.Put<User>(\"{user.Href}\", (user)), this);\r\n    //    }\r\n\r\n    //            return new UserRequest(this.requestor.Patch<User>(\"{user.Href}\", (user)), this);\r\n    //}\r\n\r\n    //        public GetCurrentUsersWatchedDocuments(): Promise < SpringCMItem < Document >> {\r\n    //    return((this.requestor.Get\r\n    //        < (SpringCMItem < Document))\r\n    //    + \"{GetObjectAPIUrl}/users/current/watcheddocuments\");\r\n    //        }\r\n\r\n    //        public GetCurrentUsersWatchedDocumentsProcessTractingActivites(): Promise < SpringCMItem < DocumentProcessTrackingActivities >> {\r\n    //    return((this.requestor.Get\r\n    //        < (SpringCMItem < DocumentProcessTrackingActivities))\r\n    //    + \"{GetObjectAPIUrl}/users/current/watcheddocumentsprocesstrackingactivities\");\r\n    //        }\r\n\r\n    //        public GetCurrentUsersWorkItems(IdorHref: string): Promise < SpringCMItem < WorkItem >> {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/users/{IdorHref}/workitems\";\r\n    //}\r\n\r\n    //return ((this.requestor.Get\r\n    //    < (SpringCMItem < WorkItem))\r\n    //    + \"{href}\");\r\n    //        }\r\n\r\n    //        public UploadDocument(folder: Folder, file: Stream, fileName: string): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(this.requestor.PostFile(\"{GetUploadAPIUrl}/folders/{getIDfromHref(folder.Href)}/documents\", file, fileName), this);\r\n    //}\r\n\r\n    //        public MakeSafeFolderName(folderName: string): string {\r\n    //    return folderName.Replace(\".\", \"_\").Replace(\"\\\", \"_\").Replace(\" / \", \"_\").Replace(\": \", \"_\").Replace(\" * \", \"_\").Replace(\" ? \", \"_\").Replace(\"\"\"\"\", \", _, (\").Replace(\" < \", \"), _, (\").Replace(\" > \", \"), _, \"\".Replace(\" | \", \"_\"));\r\n    //        }\r\n\r\n    //        public MakeSafePathName(folderName: string): string {\r\n    //    return folderName.Replace(\".\", \"_\").Replace(\":\", \"_\").Replace(\"*\", \"_\").Replace(\"?\", \"_\").Replace(\"\"\"\"\", \", _, (\").Replace(\" < \", \"), _, (\").Replace(\" > \", \"), _, \"\".Replace(\"|\", \"_\"));\r\n    //}\r\n\r\n    //        public CheckInDocument(id: string, file: Stream, fileName: string): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(this.requestor.PostFile(\"{GetUploadAPIUrl}/documents/{id}\", file, fileName), this);\r\n    //}\r\n\r\n    //        public FindOrCreateFolder(path: string): Promise < FolderRequest > {\r\n    //    try {\r\n    //        let fldrreq = this.GetFolderByPath(this.MakeSafePathName(path));\r\n    //        let fldr = fldrreq.Folder;\r\n    //        return fldrreq;\r\n    //    }\r\n    //            catch(ag /*:AggregateException*/) {\r\n    //        let ae = (<ApiException>(ag.InnerExceptions.First()));\r\n    //        if ((ae != null)) {\r\n    //            if ((ae.ApiError.Error.HttpStatusCode == 404)) {\r\n    //                return this.findOrCreateInParent(this.GetRootFolder(), path);\r\n    //            }\r\n    //            else {\r\n    //                throw ae;\r\n    //            }\r\n\r\n    //        }\r\n    //        else {\r\n    //            throw ag;\r\n    //        }\r\n\r\n    //    }\r\n\r\n    //            return new FolderRequest(\"123\", this);\r\n    //}\r\n\r\n    //        private findOrCreateInParent(parent: FolderRequest, folderPath: string): Promise < FolderRequest > {\r\n    //    let paths = folderPath.Replace(\"\\\", \" / \").Trim('/').Split('/').ToList();\r\n    //            let folder = parent.GetAllSubfolders().FirstOrDefault(() => { }, (a.Folder.Name.ToLower() == paths[0].ToLower()));\r\n    //    if((folder == null)) {\r\n    //    folder = parent.CreateSubfolder(this.MakeSafeFolderName(paths[0]));\r\n    //}\r\n\r\n    //paths.RemoveAt(0);\r\n    //if ((paths.Count > 0)) {\r\n    //    folder = this.findOrCreateInParent(folder, this.MakeSafePathName(string.Join(\"/\", paths)));\r\n    //}\r\n\r\n    //return folder;\r\n    //        }\r\n\r\n    //        public CheckOutDocument(id: string): Promise < Lock > {\r\n    //    return this.requestor.Post(\"{GetObjectAPIUrl}/documents/{id}/lock\", \"\");\r\n    //}\r\n\r\n    //        public MoveDocument(doc: Document, parentFolder: Folder): Promise < DocumentRequest > {\r\n    //    doc.ParentFolder = parentFolder;\r\n    //    return this.UpdateDocument(doc);\r\n    //}\r\n\r\n    //        public CancelCheckOutDocument(id: string): Promise < Lock > {\r\n    //    return this.requestor.Delete(\"{GetObjectAPIUrl}/documents/{id}/lock\");\r\n    //}\r\n\r\n    //        public QueryAll(springCMItem: SpringCMItem<T>): Promise < List < T >> {\r\n    //    let lst: List<T> = new List<T>();\r\n    //    let nextRes: SpringCMItem<T> = new SpringCMItem<T>();\r\n    //    lst.AddRange(springCMItem.Items);\r\n    //    lst.AddRange(nextRes.Items);\r\n    //    while((nextRes.Next != null)) {\r\n    //    nextRes = ((this.requestor.Get\r\n    //        < (SpringCMItem < T))\r\n    //        + \"{nextRes.Next}\");\r\n    //    lst.AddRange(nextRes.Items);\r\n    //}\r\n\r\n    //return lst;\r\n    //        }\r\n\r\n    //        public GetAttributeGroupFields(idOrHref: string): Promise < AttributeGroups > {\r\n    //    let test: Guid;\r\n    //    if(Guid.TryParse(idOrHref, /* out */test)) {\r\n    //    return this.requestor.Get<AttributeGroups>(\"{GetObjectAPIUrl}/attributegroups{idOrHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Get<AttributeGroups>(idOrHref);\r\n    //        }\r\n\r\n            public getIDfromHref(href: string): string {\r\n        let last = (href.lastIndexOf('/') + 1);\r\n        let end = href.length;\r\n        let diff;\r\n        return href.substring(last, diff);\r\n    }\r\n\r\n    public GetRootFolder(): Promise<FolderRequest> {\r\n        var p = new Promise<FolderRequest>((res, rej) => {\r\n            this.Requestor.Get<Folder>(`${this.GetObjectAPIUrl}/folders?systemfolder=root`).then(root => {\r\n                res(new FolderRequest(this, undefined, undefined, root));\r\n            }).catch(rej);\r\n           \r\n        })\r\n        return p;\r\n    }\r\n\r\n    //        public GetUserHomeFolder(): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Get<Folder>(\"{GetObjectAPIUrl}/folders?systemfolder=home\"), this);\r\n    //}\r\n\r\n    //        public GetEOSRootFolder(): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Get<Folder>(\"{GetObjectAPIUrl}/folders?systemfolder=othersources\"), this);\r\n    //}\r\n\r\n    //        public GetTrashFolder(): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Get<Folder>(\"{GetObjectAPIUrl}/folders?path=trash\"), this);\r\n    //}\r\n\r\n    //        public GetFolderByPath(path: string): Promise < FolderRequest > {\r\n    //    return new FolderRequest(path, this);\r\n    //}\r\n\r\n    //        public CreateFolder(folder: Folder): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Post<Folder>(\"{GetObjectAPIUrl}/Folders\", (folder)), this);\r\n    //}\r\n\r\n    //        public CreateFolder(name: string, path: string): Promise < FolderRequest > {\r\n    //    let parent = this.GetFolderByPath(path);\r\n    //    let folder = [][\r\n    //        Name = name,\r\n    //        ParentFolder = (awaitparentUnknown.Folder];\r\n\r\n    //    return new FolderRequest(this.requestor.Post<Folder>(\"{GetObjectAPIUrl}/Folders\", (folder)), this);\r\n    //}\r\n\r\n    //        public MoveFolder(folderToMove: Folder, destinationFolder: Folder): Promise < FolderRequest > {\r\n    //    folderToMove.ParentFolder = destinationFolder;\r\n    //    return this.UpdateFolder(folderToMove);\r\n    //}\r\n\r\n    //        public UpdateFolder(folder: Folder, overwriteAllAttributes: boolean = false): Promise < FolderRequest > {\r\n    //    if(!overwriteAllAttributes) {\r\n    //        return new FolderRequest(this.requestor.Patch<Folder>(folder.Href, (folder)), this);\r\n    //    }\r\n    //            else {\r\n    //        return new FolderRequest(this.requestor.Put<Folder>(folder.Href, (folder)), this);\r\n    //    }\r\n\r\n    //}\r\n\r\n    //        public FindOrCreateEOSFolder(folderName: string, path: string, objectType: string, objectId: string): Promise < FolderRequest > {\r\n    //    let fld = [][\r\n    //        EosInfo = newEosInfo{\r\n    //        Name = folderName, ObjectId = objectId, ObjectType = objectType, Path = pathUnknown];\r\n    //    return this.CreateFolder(fld);\r\n    //}\r\n\r\n    //        public DeleteFolder(folder: Folder): Promise < Folder > {\r\n    //    return this.requestor.Delete<Folder>(folder.Href);\r\n    //}\r\n\r\n    //        public UpdateDocument(doc: DocumentRequest, overwriteAllValues: boolean = false): Promise < DocumentRequest > {\r\n    //    return this.UpdateDocument(doc.Document, overwriteAllValues);\r\n    //}\r\n\r\n    //        public DeleteDocument(doc: Document): Promise < Document > {\r\n    //    return this.requestor.Delete<Document>(doc.Href);\r\n    //}\r\n\r\n    //        public UpdateDocument(doc: Document, overwriteAllValues: boolean = false): Promise < DocumentRequest > {\r\n    //    if(overwriteAllValues) {\r\n    //        return new DocumentRequest(this.requestor.Put<Document>(doc.Href, (doc)), this);\r\n\r\n    //    }\r\n\r\n    //            return new DocumentRequest(this.requestor.Patch<Document>(doc.Href, (doc)), this);\r\n    //}\r\n\r\n    //        public GetDocumentById(id: Guid): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(id, this);\r\n    //}\r\n\r\n    //        public GetDocumentByPath(path: String): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(path, this);\r\n    //}\r\n\r\n    //        public Search(request: Search, LoadAttributes: boolean = false): Promise < Search > {\r\n    //    let expand: string = \"\";\r\n    //    if(LoadAttributes) {\r\n    //        expand = \"?expand=AttributeGroups\";\r\n    //    }\r\n\r\n    //            let requestString: string = (request);\r\n    //    return this.requestor.Post<Search>(\"{GetObjectAPIUrl}/documentsearchPromises{expand}\", requestString);\r\n    //}\r\n\r\n    //        public CreateShareLink(link: ShareLink): Promise < ShareLink > {\r\n    //    return this.requestor.Post<ShareLink>(\"{GetObjectAPIUrl}/sharelinks\", (link));\r\n    //}\r\n\r\n    //        public UpdateShareLink(link: ShareLink): Promise < ShareLink > {\r\n    //    return this.requestor.Put<ShareLink>(link.Href, (link));\r\n    //}\r\n\r\n    //        public DeleteShareLink(link: ShareLink): Promise < ShareLink > {\r\n    //    return this.requestor.Delete<ShareLink>(link.Href);\r\n    //}\r\n\r\n    //        public GetShareLink(id: Guid): Promise < ShareLink > {\r\n    //    return this.requestor.Get<ShareLink>(\"{GetObjectAPIUrl}/sharelinks/{id}\");\r\n    //}\r\n\r\n    //        public CreateDocumentMergePromise(documentMergePromise: DocumentMergePromises): Promise < DocumentMergePromises > {\r\n    //    return this.requestor.Post<DocumentMergePromises>(\"{GetObjectAPIUrl}/documentmergePromises\", (documentMergePromise));\r\n    //}\r\n\r\n    //        public CreateDocumentCopyPromise(documentCopyPromise: CopyPromises): Promise < CopyPromises > {\r\n    //    return this.requestor.Post<CopyPromises>(\"{GetObjectAPIUrl}/copyPromises\", (documentCopyPromise));\r\n    //}\r\n\r\n    //        public CreateFolderSearchPromise(folderSearchPromise: FolderSearchPromises): Promise < FolderSearchPromises > {\r\n    //    return this.requestor.Post<FolderSearchPromises>(\"{GetObjectAPIUrl}/foldersearchPromises\", (folderSearchPromise));\r\n    //}\r\n\r\n    //        public CreateFolderArchivePromise(folderArchivePromise: FolderArchivePromises): Promise < FolderArchivePromises > {\r\n    //    return this.requestor.Post<FolderArchivePromises>(\"{GetObjectAPIUrl}/folderarchivePromises\", (folderArchivePromise));\r\n    //}\r\n\r\n    //        public CreateDocumentSplitPromise(splitDocumentPromise: SplitDocumentPromises): Promise < SplitDocumentPromises > {\r\n    //    return this.requestor.Post<SplitDocumentPromises>(\"{GetObjectAPIUrl}/splitdocumentPromises\", (splitDocumentPromise));\r\n    //}\r\n\r\n    //        public GetSignaturePromise(IdorHref: string): Promise < SignaturePromises > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    return this.requestor.Get<SignaturePromises>(\"{GetObjectAPIUrl}/signaturePromises/{IdorHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Get<SignaturePromises>(href);\r\n    //        }\r\n\r\n    //        public CreateSignaturePromise(signaturePromise: SignaturePromises): Promise < SignaturePromises > {\r\n    //    return this.requestor.Post<SignaturePromises>(\"{GetObjectAPIUrl}/signaturePromises\", (signaturePromise));\r\n    //}\r\n\r\n    //        public DeleteSignaturePromise(href: string): Promise < SignaturePromises > {\r\n    //    return this.requestor.Delete<SignaturePromises>(href);\r\n    //}\r\n\r\n    //        public GetExternalReviewPromise(IdorHref: string): Promise < ExternalReviewPromises > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    return this.requestor.Get<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises/{IdorHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Get<ExternalReviewPromises>(href);\r\n    //        }\r\n\r\n    //        public CreateExternalReviewPromise(externalReviewPromise: ExternalReviewPromises): Promise < ExternalReviewPromises > {\r\n    //    return this.requestor.Post<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises\", (externalReviewPromise));\r\n    //}\r\n\r\n    //        public DeleteExternalReviewPromise(IdorHref: string): Promise < ExternalReviewPromises > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    return this.requestor.Delete<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises/{IdorHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Delete<ExternalReviewPromises>(href);\r\n    //        }\r\n\r\n    //        public GetExternalReviewPromiseDocuments(Id: Guid): Promise < ExternalReviewPromises > {\r\n    //    return this.requestor.Get<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises/{Id}/documents\");\r\n    //}\r\n    //    }\r\n}","export class Validator {\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public static uuid = {\n        3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n        4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n    };\n    public static isUUID = (str): boolean => {\n        var version = 'all';\n        // this.assertString(str);\n        var pattern = Validator.uuid[version];\n        return pattern && pattern.test(str);\n    }\r\n\r\n    //    public  assertString =(input) => {\n    //        var isString = typeof input === 'string' || input instanceof String;\n\n    //        if (!isString) {\n    //            var invalidType;\n\n    //            if (input === null) {\n    //                invalidType = 'null';\n    //            } else {\n    //                invalidType = this._typeof(input);\n\n    //                if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {\n    //                    invalidType = input.constructor.name;\n    //                } else {\n    //                    invalidType = \"a \".concat(invalidType);\n    //                }\n    //            }\n\n    //            throw new TypeError(\"Expected string but received \".concat(invalidType, \".\"));\n    //        }\n    //    }\r\n\r\n    //    private  _typeof = (obj)=> {\n    //    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    //        this._typeof = function (obj) {\n    //            return typeof obj;\n    //        };\n    //    } else {\n    //        this._typeof = function (obj) {\n    //            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    //        };\n    //    }\n\n    //    return this._typeof(obj);\n    //}\r\n}","module.exports = require(\"request-promise-native\");"],"sourceRoot":""}