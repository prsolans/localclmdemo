{"version":3,"sources":["webpack://SpringSDK/webpack/bootstrap","webpack://SpringSDK/./wwwroot/SDK/Service/BrowserHttpRequest.ts","webpack://SpringSDK/./wwwroot/SDK/Service/BrowserRequestFactory.ts","webpack://SpringSDK/./wwwroot/SDK/Service/BrowserSpringCMService.ts","webpack://SpringSDK/./wwwroot/SDK/Service/SpringCMService.ts","webpack://SpringSDK/./wwwroot/SDK/Service/validator.ts"],"names":[],"mappings":"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","file":"SpringCMSDK.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { IHttpRequestor } from \"./IHttpRequest\";\r\nimport { IAuthenticator } from \"../Authentication/IAuthentication\";\r\n\r\n\r\n\r\nexport class BrowserHttpRequest implements IHttpRequestor {\r\n\r\n    constructor(auth: IAuthenticator) {\r\n        this.Authenticator = auth;\r\n    }\r\n    public Authenticator: IAuthenticator;\r\n\r\n\r\n\r\n    public Put<T>(url: string, body: any, headers?: any): Promise<T> {\r\n        return new Promise<T>((res, rej) => {\r\n            $.ajax(url, { method: \"PUT\", data: body, headers: headers }).done(res).fail(rej);\r\n        });\r\n    }\r\n    \r\n\r\n    \r\n    public  Post<T>(url: string, body: any, headers: any): Promise<T>  {\r\n\r\n        return new Promise<T>((res, rej) => {\r\n            $.ajax(url, { method: \"POST\", data: body, headers: headers }).done(res).fail(rej);\r\n        });\r\n    }\r\n\r\n    public Get= <T>(url: string, headers: any = undefined): Promise<T> => {\r\n        return new Promise<T>((res, rej) => {\r\n            return $.ajax(url, { method: \"GET\", data: undefined, headers: headers }).done(res).fail(rej);\r\n        });\r\n    }\r\n    public Delete = <T>(url: string, headers: any = undefined): Promise<T> => {\r\n        return new Promise<T>((res, rej) => {\r\n            return $.ajax(url, { method: \"DELETE\", data: undefined, headers: headers }).done(res).fail(rej);\r\n        });\r\n    }\r\n    public Patch = <T>(url: string, body: any, headers: any = undefined): Promise<T> => {\r\n        return new Promise<T>((res, rej) => {\r\n            return $.ajax(url, { method: \"PATCH\", data: body, headers: headers }).done(res).fail(rej);\r\n        });\r\n    }\r\n    public MakeCall = <T>(url: string, body: any, headers: any, method: string): Promise<T>=> {\r\n        return new Promise<T>((res, rej) => {\r\n            return $.ajax(url, { method: method, data: body, headers: headers }).done(res).fail(rej);\r\n        });\r\n    };\r\n   \r\n}","import { IHttpRequestor } from \"./IHttpRequest\";\r\nimport { BrowserHttpRequest } from \"./BrowserHttpRequest\";\r\n//import { EformHttpRequest } from \"./EformHttpRequest\";\r\n//import { NodeHttpRequest } from \"./NodeHttpRequest\";\r\nimport { IAuthenticator } from \"../Authentication/IAuthentication\";\r\ndeclare var SpringCM: any;\r\nexport class RequestorFactory {\r\n    \r\n    public static GetRequestor = (auth: IAuthenticator): IHttpRequestor => {\r\n        if (typeof window === 'undefined') {\r\n            \r\n           // return new NodeHttpRequest(auth);\r\n\r\n        }\r\n        else {\r\n            if (SpringCM.API != undefined) {\r\n                \r\n                //return new EformHttpRequest();\r\n            }\r\n            else {\r\n               return new BrowserHttpRequest(auth);\r\n            }\r\n\r\n            return null;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n","import { SpringCMServiceBase } from \"./SpringCMService\";\r\nimport { RequestorFactory } from \"./BrowserRequestFactory\";\r\nimport { IAuthenticator } from \"../Authentication/IAuthentication\";\r\n\r\nexport class SpringCMService extends SpringCMServiceBase {\r\n\r\n\r\n    public constructor(auth: IAuthenticator, datacenter: string) {\r\n        super(auth, datacenter);\r\n        this.Requestor = RequestorFactory.GetRequestor(auth);\r\n        \r\n    }\r\n}","import { IAuthenticator } from \"../Authentication/IAuthentication\";\r\n\r\nimport { IHttpRequestor } from \"./IHttpRequest\";\r\nimport { Account } from \"../Model/Account\";\r\nimport { SpringCMItem } from \"../Model/SpringCMItem\";\r\nimport { AttributeGroups } from \"../Model/AttributeGroup\";\r\nimport { DocLauncher } from \"../Model/DocLauncher\";\r\nimport { PermissionSet } from \"../Model/PermissionSet\";\r\nimport { DocLauncherTask } from \"../Model/DocLauncherTask\";\r\nimport { Contacts } from \"../Model/Contacts\";\r\nimport { Workflow } from \"../Model/Workflow\";\r\nimport { WorkflowQueue } from \"../Model/WorkflowQueue\";\r\nimport { WorkItem } from \"../Model/WorkItem\";\r\nimport { Validator } from \"./validator\";\r\n\r\nexport class SpringCMServiceBase {\r\n\r\n    public DefaultQueryBatch: number;\r\n\r\n    public constructor(auth: IAuthenticator, datacenter: string) {\r\n       \r\n        this.Datacenter = datacenter;\r\n        this.GetObjectAPIUrl = `https://api${this.Datacenter}.springcm.com/${this.ApplicationVersion}`;\r\n        this.GetDownloadAPIUrl = `https://apiupload${this.Datacenter}.springcm.com/${this.ApplicationVersion}`;\r\n        this.GetDownloadAPIUrl = `https://apidownload${this.Datacenter}.springcm.com/${this.ApplicationVersion}`;\r\n    }\r\n\r\n    public ApplicationVersion: string =  \"v201411\";\r\n\r\n    private Datacenter: string\r\n\r\n\r\n    public GetObjectAPIUrl: string;\r\n\r\n    public  GetUploadAPIUrl: string;\r\n\r\n    public  GetDownloadAPIUrl: string;\r\n\r\n    public Requestor: IHttpRequestor\r\n\r\n    public GetCurrentAccount(): Promise<Account> {\r\n        return this.Requestor.Get<Account>(`${this.GetObjectAPIUrl}/accounts/current`);\r\n    }\r\n\r\n        public UpdateAccount(act: Account): Promise<Account> {\r\n            return this.Requestor.Patch<Account>(act.Href,act);\r\n        }\r\n\r\n        public GetCurrentAccountAttributeGroups(): Promise<SpringCMItem<AttributeGroups>> {\r\n            return this.Requestor.Get<SpringCMItem<AttributeGroups>>( `${this.GetObjectAPIUrl}/accounts/current/attributegroups`);\r\n            \r\n        }\r\n\r\n    //    public QueryNext(springCMItem: SpringCMItem<T>): Promise<SpringCMItem<T>> {\r\n    //        return ((this.requestor.Get\r\n    //            < (SpringCMItem < T))\r\n    //            + \"{springCMItem.Next}\");\r\n    //    }\r\n\r\n        public GetAllDocLauncherConfigs(): Promise<SpringCMItem<DocLauncher>> {\r\n            return this.Requestor.Get<SpringCMItem < DocLauncher>>(`${this.GetObjectAPIUrl}/doclauncherconfigurations`);\r\n        }\r\n\r\n        public GetAllPermissionSets(): Promise<SpringCMItem<PermissionSet>> {\r\n            return this.Requestor.Get<SpringCMItem<PermissionSet>>(`${this.GetObjectAPIUrl}/permissionsets`);\r\n        }\r\n\r\n        public GetDocLauncherTask(IdorHref: string): Promise<DocLauncherTask> {\r\n            let href = IdorHref;\r\n\t\t\tif (Validator.isUUID(IdorHref)) {\r\n\t\t\t\thref = `${this.GetObjectAPIUrl}/doclauncherTask/${IdorHref}`;\r\n            }\r\n\r\n            return this.Requestor.Get<DocLauncherTask>(href);\r\n        }\r\n\r\n\t\tpublic CreateDocLauncherTask(DocLauncherTask: DocLauncherTask): Promise<DocLauncherTask> {\r\n\t\t\treturn this.Requestor.Post<DocLauncherTask>(`${this.GetObjectAPIUrl}/DocLauncherTask`, DocLauncherTask);\r\n\t\t\t}\r\n\r\n        public GetAllContacts(): Promise<SpringCMItem<Contacts>> {\r\n            return this.Requestor.Get<SpringCMItem<Contacts>>(`${this.GetObjectAPIUrl}/contacts`);\r\n        }\r\n\r\n        public GetContactById(Id: string): Promise<Contacts> {\r\n            return this.Requestor.Get<Contacts>(`${this.GetObjectAPIUrl}/contacts/{Id}`);\r\n        }\r\n\r\n        public CreateContact(contact: Contacts): Promise<Contacts> {\r\n            return this.Requestor.Post<Contacts>(`${this.GetObjectAPIUrl}/contacts/`, contact);\r\n        }\r\n\r\n        public UpdateContact(contact: Contacts): Promise<Contacts> {\r\n            return this.Requestor.Put<Contacts>(contact.Href, contact);\r\n        }\r\n\r\n        public DeleteContact(contact: Contacts): Promise<Contacts> {\r\n            return this.Requestor.Delete<Contacts>(contact.Href);\r\n        }\r\n\r\n        public GetWorkflow(IdorHref: string): Promise<Workflow> {\r\n\t\t\tlet href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workflows/${IdorHref}`;\r\n            }\r\n\r\n            return this.Requestor.Get<Workflow>(href);\r\n        }\r\n\r\n        public StartWorkflow(workflow: Workflow): Promise<Workflow> {\r\n            return this.Requestor.Post<Workflow>(`${this.GetObjectAPIUrl}/workflows/`, (workflow));\r\n        }\r\n\r\n        public SignalWorkflow(workflow: Workflow, data: string): Promise<Workflow> {\r\n            return this.Requestor.Post<Workflow>(`${workflow.Href}/signal`, `{\"data\":\"${data}\" }`);\r\n        }\r\n\r\n        public DeleteWorkflow(workflow: Workflow): Promise<Workflow> {\r\n            return this.Requestor.Delete<Workflow>(workflow.Href);\r\n        }\r\n\r\n        public GetWorkflowQueue(IdorHref: string): Promise<SpringCMItem<WorkflowQueue>> {\r\n   //         let id: Guid;\r\n            let href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workflowqueues/${IdorHref}`;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        public GetWorkflowQueueWorkItems(IdorHref: string): Promise<SpringCMItem<WorkItem>> {\r\n   //         let id: Guid;\r\n            let href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workflowqueues/${IdorHref}/workitems`;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        public GetWorkItem(IdorHref: string, assignee: boolean = false, documents: boolean = false, assigneeInstructions: boolean = false, workflow: boolean = false, selections: boolean = false): Promise<WorkItem> {\r\n    //        let id: Guid;\r\n            let href = IdorHref;\r\n            if (Validator.isUUID(IdorHref)) {\r\n                href = `${this.GetObjectAPIUrl}/workitems/${IdorHref}`;\r\n            }\r\n\r\n            let expandString: Array<String> = [];\r\n            if (assignee) {\r\n                expandString.push(\"Assignee\");\r\n            }\r\n\r\n            if (documents) {\r\n                expandString.push(\"Documents\");\r\n            }\r\n\r\n            if (assigneeInstructions) {\r\n                expandString.push(\"AssigneeInstructions\");\r\n            }\r\n\r\n            if (workflow) {\r\n                expandString.push(\"Workflow\");\r\n            }\r\n\r\n            if (selections) {\r\n                expandString.push(\"Selections\");\r\n            }\r\n\r\n            if ((expandString.length == 0)) {\r\n                return this.Requestor.Get<WorkItem>(href);\r\n            }\r\n            let expand = `expand=${expandString.join(',')}`;\r\n            return this.Requestor.Get<WorkItem>(`${href}?expand=${expand}`);\r\n            \r\n        };\r\n              \r\n    //        ///  <summary>\r\n    //        ///  Method accepts an ID or an HREF\r\n    //        ///  Brings back documents assigned to a user via SpringCM Promise\r\n    //        ///  </summary>\r\n    //        ///  <param name=\"IdorHref\"></param>\r\n    //        ///  <returns>Returns a list of documents associated to the Promises assigned to a user</returns>\r\n    //        public GetWorkItemDocuments(IdorHref: string): Promise < SpringCMItem < Document >> {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/workitems/{IdorHref}/documents\";\r\n    //}\r\n\r\n    //return ((this.requestor.Get\r\n    //    < (SpringCMItem < Document))\r\n    //    + \"{href}\");\r\n    //        }\r\n\r\n    //        ///  <summary>\r\n    //        ///   Method accepts an ID or an HREF\r\n    //        ///   Currently this method does not work but may in the future.\r\n    //        ///  </summary>\r\n    //        ///  <param name=\"workitem\"></param>\r\n    //        ///  <param name=\"IdorHref\"></param>\r\n    //        ///  <returns></returns>\r\n    //        public UpdateWorkitem(workitem: WorkItem, IdorHref: string): Promise < WorkItem > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/workitems/{IdorHref}\";\r\n    //}\r\n\r\n    //return this.requestor.Patch<WorkItem>(\"{href}\", (workitem));\r\n    //        }\r\n\r\n    //        public GetDocumentReminder(IdorHref: string): Promise < DocumentReminder > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/DocumentReminders/{id}\";\r\n    //}\r\n\r\n    //return this.requestor.Get<DocumentReminder>((href + \"?expand=Documents,RecipientUsers,RecipientGroups\"));\r\n    //        }\r\n\r\n    //        public CreateDocumentReminder(documentReminder: DocumentReminder): Promise < DocumentReminder > {\r\n    //    return this.requestor.Post<DocumentReminder>(\"{GetObjectAPIUrl}/DocumentReminders/\", (documentReminder));\r\n    //}\r\n\r\n    //        public UpdateDocumentReminder(documentReminder: DocumentReminder): Promise < DocumentReminder > {\r\n    //    return this.requestor.Put<DocumentReminder>(documentReminder.Href, (documentReminder));\r\n    //}\r\n\r\n    //        public DeleteDocumentReminder(documentReminder: DocumentReminder): Promise < DocumentReminder > {\r\n    //    return this.requestor.Delete<DocumentReminder>(documentReminder.Href);\r\n    //}\r\n\r\n    //        public GetGroup(IdorHref: string, loadGroupMembers: boolean = false): Promise < Group > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    let expand = \"\";\r\n    //    if(loadGroupMembers) {\r\n    //        expand = \"?expand=GroupMembers\";\r\n    //    }\r\n\r\n    //            if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/Groups/{IdorHref}{expand}\";\r\n    //}\r\n\r\n    //return this.requestor.Get<Group>(href);\r\n    //        }\r\n\r\n    //        public GetGroupMembers(IdorHref: string): Promise < SpringCMItem < User >> {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/Groups/{IdorHref}\";\r\n    //}\r\n\r\n    //return ((this.requestor.Get\r\n    //    < (SpringCMItem < User))\r\n    //    + \"{href}/groupmembers\");\r\n    //        }\r\n\r\n    //        public CreateGroup(group: Group): Promise < Group > {\r\n    //    return this.requestor.Post<Group>(\"{GetObjectAPIUrl}/groups/\", (group));\r\n    //}\r\n\r\n    //        public UpdateGroup(group: Group, overwriteMembers: boolean = false): Promise < Group > {\r\n    //    if(overwriteMembers) {\r\n    //        return this.requestor.Put<Group>(\"{group.Href}\", (group));\r\n    //    }\r\n\r\n    //            return this.requestor.Patch<Group>(\"{group.Href}\", (group));\r\n    //}\r\n\r\n    //        public DeleteGroup(group: Group): Promise < Group > {\r\n    //    return this.requestor.Delete<Group>(group.Href);\r\n    //}\r\n\r\n    //        public GetCurrentUser(): Promise < UserRequest > {\r\n    //    return new UserRequest(this.requestor.Get<User>(\"{GetObjectAPIUrl}/Users/Current\"), this);\r\n    //}\r\n\r\n    //        public GetAllUsers(): Promise < List < UserRequest >> {\r\n    //    let users = ((this.requestor.Get\r\n    //        < (List < User))\r\n    //        + \"{GetObjectAPIUrl}/Users/\");\r\n    //    return users.Select(() => { }, new UserRequest(a, this)).ToList();\r\n    //}\r\n\r\n    //        public CreateUser(user: UserRequest): Promise < UserRequest > {\r\n    //    return this.CreateUser(user.User);\r\n    //}\r\n\r\n    //        public CreateUser(user: User): Promise < UserRequest > {\r\n    //    return new UserRequest(this.requestor.Post<User>(\"{GetObjectAPIUrl}/users/\", (user)), this);\r\n    //}\r\n\r\n    //        public DeleteUser(user: UserRequest): Promise < User > {\r\n    //    return this.DeleteUser(user.User);\r\n    //}\r\n\r\n    //        public DeleteUser(user: User): Promise < User > {\r\n    //    return this.requestor.Delete<User>(user.Href);\r\n    //}\r\n\r\n    //        public GetUser(IdorHref: string): Promise < UserRequest > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/users/{IdorHref}\";\r\n    //}\r\n\r\n    //return new UserRequest(this.requestor.Get<User>(href), this);\r\n    //        }\r\n\r\n    //        public UpdateUser(user: UserRequest, overwriteGroups: boolean = false): Promise < UserRequest > {\r\n    //    return this.UpdateUser(user.User, overwriteGroups);\r\n    //}\r\n\r\n    //        public UpdateUser(user: User, overwriteGroups: boolean = false): Promise < UserRequest > {\r\n    //    if(overwriteGroups) {\r\n    //        return new UserRequest(this.requestor.Put<User>(\"{user.Href}\", (user)), this);\r\n    //    }\r\n\r\n    //            return new UserRequest(this.requestor.Patch<User>(\"{user.Href}\", (user)), this);\r\n    //}\r\n\r\n    //        public GetCurrentUsersWatchedDocuments(): Promise < SpringCMItem < Document >> {\r\n    //    return((this.requestor.Get\r\n    //        < (SpringCMItem < Document))\r\n    //    + \"{GetObjectAPIUrl}/users/current/watcheddocuments\");\r\n    //        }\r\n\r\n    //        public GetCurrentUsersWatchedDocumentsProcessTractingActivites(): Promise < SpringCMItem < DocumentProcessTrackingActivities >> {\r\n    //    return((this.requestor.Get\r\n    //        < (SpringCMItem < DocumentProcessTrackingActivities))\r\n    //    + \"{GetObjectAPIUrl}/users/current/watcheddocumentsprocesstrackingactivities\");\r\n    //        }\r\n\r\n    //        public GetCurrentUsersWorkItems(IdorHref: string): Promise < SpringCMItem < WorkItem >> {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    href = \"{GetObjectAPIUrl}/users/{IdorHref}/workitems\";\r\n    //}\r\n\r\n    //return ((this.requestor.Get\r\n    //    < (SpringCMItem < WorkItem))\r\n    //    + \"{href}\");\r\n    //        }\r\n\r\n    //        public UploadDocument(folder: Folder, file: Stream, fileName: string): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(this.requestor.PostFile(\"{GetUploadAPIUrl}/folders/{getIDfromHref(folder.Href)}/documents\", file, fileName), this);\r\n    //}\r\n\r\n    //        public MakeSafeFolderName(folderName: string): string {\r\n    //    return folderName.Replace(\".\", \"_\").Replace(\"\\\", \"_\").Replace(\" / \", \"_\").Replace(\": \", \"_\").Replace(\" * \", \"_\").Replace(\" ? \", \"_\").Replace(\"\"\"\"\", \", _, (\").Replace(\" < \", \"), _, (\").Replace(\" > \", \"), _, \"\".Replace(\" | \", \"_\"));\r\n    //        }\r\n\r\n    //        public MakeSafePathName(folderName: string): string {\r\n    //    return folderName.Replace(\".\", \"_\").Replace(\":\", \"_\").Replace(\"*\", \"_\").Replace(\"?\", \"_\").Replace(\"\"\"\"\", \", _, (\").Replace(\" < \", \"), _, (\").Replace(\" > \", \"), _, \"\".Replace(\"|\", \"_\"));\r\n    //}\r\n\r\n    //        public CheckInDocument(id: string, file: Stream, fileName: string): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(this.requestor.PostFile(\"{GetUploadAPIUrl}/documents/{id}\", file, fileName), this);\r\n    //}\r\n\r\n    //        public FindOrCreateFolder(path: string): Promise < FolderRequest > {\r\n    //    try {\r\n    //        let fldrreq = this.GetFolderByPath(this.MakeSafePathName(path));\r\n    //        let fldr = fldrreq.Folder;\r\n    //        return fldrreq;\r\n    //    }\r\n    //            catch(ag /*:AggregateException*/) {\r\n    //        let ae = (<ApiException>(ag.InnerExceptions.First()));\r\n    //        if ((ae != null)) {\r\n    //            if ((ae.ApiError.Error.HttpStatusCode == 404)) {\r\n    //                return this.findOrCreateInParent(this.GetRootFolder(), path);\r\n    //            }\r\n    //            else {\r\n    //                throw ae;\r\n    //            }\r\n\r\n    //        }\r\n    //        else {\r\n    //            throw ag;\r\n    //        }\r\n\r\n    //    }\r\n\r\n    //            return new FolderRequest(\"123\", this);\r\n    //}\r\n\r\n    //        private findOrCreateInParent(parent: FolderRequest, folderPath: string): Promise < FolderRequest > {\r\n    //    let paths = folderPath.Replace(\"\\\", \" / \").Trim('/').Split('/').ToList();\r\n    //            let folder = parent.GetAllSubfolders().FirstOrDefault(() => { }, (a.Folder.Name.ToLower() == paths[0].ToLower()));\r\n    //    if((folder == null)) {\r\n    //    folder = parent.CreateSubfolder(this.MakeSafeFolderName(paths[0]));\r\n    //}\r\n\r\n    //paths.RemoveAt(0);\r\n    //if ((paths.Count > 0)) {\r\n    //    folder = this.findOrCreateInParent(folder, this.MakeSafePathName(string.Join(\"/\", paths)));\r\n    //}\r\n\r\n    //return folder;\r\n    //        }\r\n\r\n    //        public CheckOutDocument(id: string): Promise < Lock > {\r\n    //    return this.requestor.Post(\"{GetObjectAPIUrl}/documents/{id}/lock\", \"\");\r\n    //}\r\n\r\n    //        public MoveDocument(doc: Document, parentFolder: Folder): Promise < DocumentRequest > {\r\n    //    doc.ParentFolder = parentFolder;\r\n    //    return this.UpdateDocument(doc);\r\n    //}\r\n\r\n    //        public CancelCheckOutDocument(id: string): Promise < Lock > {\r\n    //    return this.requestor.Delete(\"{GetObjectAPIUrl}/documents/{id}/lock\");\r\n    //}\r\n\r\n    //        public QueryAll(springCMItem: SpringCMItem<T>): Promise < List < T >> {\r\n    //    let lst: List<T> = new List<T>();\r\n    //    let nextRes: SpringCMItem<T> = new SpringCMItem<T>();\r\n    //    lst.AddRange(springCMItem.Items);\r\n    //    lst.AddRange(nextRes.Items);\r\n    //    while((nextRes.Next != null)) {\r\n    //    nextRes = ((this.requestor.Get\r\n    //        < (SpringCMItem < T))\r\n    //        + \"{nextRes.Next}\");\r\n    //    lst.AddRange(nextRes.Items);\r\n    //}\r\n\r\n    //return lst;\r\n    //        }\r\n\r\n    //        public GetAttributeGroupFields(idOrHref: string): Promise < AttributeGroups > {\r\n    //    let test: Guid;\r\n    //    if(Guid.TryParse(idOrHref, /* out */test)) {\r\n    //    return this.requestor.Get<AttributeGroups>(\"{GetObjectAPIUrl}/attributegroups{idOrHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Get<AttributeGroups>(idOrHref);\r\n    //        }\r\n\r\n    //        public getIDfromHref(href: string): string {\r\n    //    let last = (href.LastIndexOf('/') + 1);\r\n    //    let end = href.Length;\r\n    //    let diff;\r\n    //    return href.Substring(last, diff);\r\n    //}\r\n\r\n    //        public GetRootFolder(): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Get<Folder>(\"{GetObjectAPIUrl}/folders?systemfolder=root\"), this);\r\n    //}\r\n\r\n    //        public GetUserHomeFolder(): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Get<Folder>(\"{GetObjectAPIUrl}/folders?systemfolder=home\"), this);\r\n    //}\r\n\r\n    //        public GetEOSRootFolder(): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Get<Folder>(\"{GetObjectAPIUrl}/folders?systemfolder=othersources\"), this);\r\n    //}\r\n\r\n    //        public GetTrashFolder(): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Get<Folder>(\"{GetObjectAPIUrl}/folders?path=trash\"), this);\r\n    //}\r\n\r\n    //        public GetFolderByPath(path: string): Promise < FolderRequest > {\r\n    //    return new FolderRequest(path, this);\r\n    //}\r\n\r\n    //        public CreateFolder(folder: Folder): Promise < FolderRequest > {\r\n    //    return new FolderRequest(this.requestor.Post<Folder>(\"{GetObjectAPIUrl}/Folders\", (folder)), this);\r\n    //}\r\n\r\n    //        public CreateFolder(name: string, path: string): Promise < FolderRequest > {\r\n    //    let parent = this.GetFolderByPath(path);\r\n    //    let folder = [][\r\n    //        Name = name,\r\n    //        ParentFolder = (awaitparentUnknown.Folder];\r\n\r\n    //    return new FolderRequest(this.requestor.Post<Folder>(\"{GetObjectAPIUrl}/Folders\", (folder)), this);\r\n    //}\r\n\r\n    //        public MoveFolder(folderToMove: Folder, destinationFolder: Folder): Promise < FolderRequest > {\r\n    //    folderToMove.ParentFolder = destinationFolder;\r\n    //    return this.UpdateFolder(folderToMove);\r\n    //}\r\n\r\n    //        public UpdateFolder(folder: Folder, overwriteAllAttributes: boolean = false): Promise < FolderRequest > {\r\n    //    if(!overwriteAllAttributes) {\r\n    //        return new FolderRequest(this.requestor.Patch<Folder>(folder.Href, (folder)), this);\r\n    //    }\r\n    //            else {\r\n    //        return new FolderRequest(this.requestor.Put<Folder>(folder.Href, (folder)), this);\r\n    //    }\r\n\r\n    //}\r\n\r\n    //        public FindOrCreateEOSFolder(folderName: string, path: string, objectType: string, objectId: string): Promise < FolderRequest > {\r\n    //    let fld = [][\r\n    //        EosInfo = newEosInfo{\r\n    //        Name = folderName, ObjectId = objectId, ObjectType = objectType, Path = pathUnknown];\r\n    //    return this.CreateFolder(fld);\r\n    //}\r\n\r\n    //        public DeleteFolder(folder: Folder): Promise < Folder > {\r\n    //    return this.requestor.Delete<Folder>(folder.Href);\r\n    //}\r\n\r\n    //        public UpdateDocument(doc: DocumentRequest, overwriteAllValues: boolean = false): Promise < DocumentRequest > {\r\n    //    return this.UpdateDocument(doc.Document, overwriteAllValues);\r\n    //}\r\n\r\n    //        public DeleteDocument(doc: Document): Promise < Document > {\r\n    //    return this.requestor.Delete<Document>(doc.Href);\r\n    //}\r\n\r\n    //        public UpdateDocument(doc: Document, overwriteAllValues: boolean = false): Promise < DocumentRequest > {\r\n    //    if(overwriteAllValues) {\r\n    //        return new DocumentRequest(this.requestor.Put<Document>(doc.Href, (doc)), this);\r\n\r\n    //    }\r\n\r\n    //            return new DocumentRequest(this.requestor.Patch<Document>(doc.Href, (doc)), this);\r\n    //}\r\n\r\n    //        public GetDocumentById(id: Guid): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(id, this);\r\n    //}\r\n\r\n    //        public GetDocumentByPath(path: String): Promise < DocumentRequest > {\r\n    //    return new DocumentRequest(path, this);\r\n    //}\r\n\r\n    //        public Search(request: Search, LoadAttributes: boolean = false): Promise < Search > {\r\n    //    let expand: string = \"\";\r\n    //    if(LoadAttributes) {\r\n    //        expand = \"?expand=AttributeGroups\";\r\n    //    }\r\n\r\n    //            let requestString: string = (request);\r\n    //    return this.requestor.Post<Search>(\"{GetObjectAPIUrl}/documentsearchPromises{expand}\", requestString);\r\n    //}\r\n\r\n    //        public CreateShareLink(link: ShareLink): Promise < ShareLink > {\r\n    //    return this.requestor.Post<ShareLink>(\"{GetObjectAPIUrl}/sharelinks\", (link));\r\n    //}\r\n\r\n    //        public UpdateShareLink(link: ShareLink): Promise < ShareLink > {\r\n    //    return this.requestor.Put<ShareLink>(link.Href, (link));\r\n    //}\r\n\r\n    //        public DeleteShareLink(link: ShareLink): Promise < ShareLink > {\r\n    //    return this.requestor.Delete<ShareLink>(link.Href);\r\n    //}\r\n\r\n    //        public GetShareLink(id: Guid): Promise < ShareLink > {\r\n    //    return this.requestor.Get<ShareLink>(\"{GetObjectAPIUrl}/sharelinks/{id}\");\r\n    //}\r\n\r\n    //        public CreateDocumentMergePromise(documentMergePromise: DocumentMergePromises): Promise < DocumentMergePromises > {\r\n    //    return this.requestor.Post<DocumentMergePromises>(\"{GetObjectAPIUrl}/documentmergePromises\", (documentMergePromise));\r\n    //}\r\n\r\n    //        public CreateDocumentCopyPromise(documentCopyPromise: CopyPromises): Promise < CopyPromises > {\r\n    //    return this.requestor.Post<CopyPromises>(\"{GetObjectAPIUrl}/copyPromises\", (documentCopyPromise));\r\n    //}\r\n\r\n    //        public CreateFolderSearchPromise(folderSearchPromise: FolderSearchPromises): Promise < FolderSearchPromises > {\r\n    //    return this.requestor.Post<FolderSearchPromises>(\"{GetObjectAPIUrl}/foldersearchPromises\", (folderSearchPromise));\r\n    //}\r\n\r\n    //        public CreateFolderArchivePromise(folderArchivePromise: FolderArchivePromises): Promise < FolderArchivePromises > {\r\n    //    return this.requestor.Post<FolderArchivePromises>(\"{GetObjectAPIUrl}/folderarchivePromises\", (folderArchivePromise));\r\n    //}\r\n\r\n    //        public CreateDocumentSplitPromise(splitDocumentPromise: SplitDocumentPromises): Promise < SplitDocumentPromises > {\r\n    //    return this.requestor.Post<SplitDocumentPromises>(\"{GetObjectAPIUrl}/splitdocumentPromises\", (splitDocumentPromise));\r\n    //}\r\n\r\n    //        public GetSignaturePromise(IdorHref: string): Promise < SignaturePromises > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    return this.requestor.Get<SignaturePromises>(\"{GetObjectAPIUrl}/signaturePromises/{IdorHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Get<SignaturePromises>(href);\r\n    //        }\r\n\r\n    //        public CreateSignaturePromise(signaturePromise: SignaturePromises): Promise < SignaturePromises > {\r\n    //    return this.requestor.Post<SignaturePromises>(\"{GetObjectAPIUrl}/signaturePromises\", (signaturePromise));\r\n    //}\r\n\r\n    //        public DeleteSignaturePromise(href: string): Promise < SignaturePromises > {\r\n    //    return this.requestor.Delete<SignaturePromises>(href);\r\n    //}\r\n\r\n    //        public GetExternalReviewPromise(IdorHref: string): Promise < ExternalReviewPromises > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    return this.requestor.Get<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises/{IdorHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Get<ExternalReviewPromises>(href);\r\n    //        }\r\n\r\n    //        public CreateExternalReviewPromise(externalReviewPromise: ExternalReviewPromises): Promise < ExternalReviewPromises > {\r\n    //    return this.requestor.Post<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises\", (externalReviewPromise));\r\n    //}\r\n\r\n    //        public DeleteExternalReviewPromise(IdorHref: string): Promise < ExternalReviewPromises > {\r\n    //    let id: Guid;\r\n    //    let href = IdorHref;\r\n    //    if(Guid.TryParse(IdorHref, /* out */id)) {\r\n    //    return this.requestor.Delete<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises/{IdorHref}\");\r\n    //}\r\n\r\n    //return this.requestor.Delete<ExternalReviewPromises>(href);\r\n    //        }\r\n\r\n    //        public GetExternalReviewPromiseDocuments(Id: Guid): Promise < ExternalReviewPromises > {\r\n    //    return this.requestor.Get<ExternalReviewPromises>(\"{GetObjectAPIUrl}/externalreviewPromises/{Id}/documents\");\r\n    //}\r\n    //    }\r\n}","export class Validator {\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public static uuid = {\n        3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n        4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n    };\n    public static isUUID = (str): boolean => {\n        var version = 'all';\n        // this.assertString(str);\n        var pattern = Validator.uuid[version];\n        return pattern && pattern.test(str);\n    }\r\n\r\n    //    public  assertString =(input) => {\n    //        var isString = typeof input === 'string' || input instanceof String;\n\n    //        if (!isString) {\n    //            var invalidType;\n\n    //            if (input === null) {\n    //                invalidType = 'null';\n    //            } else {\n    //                invalidType = this._typeof(input);\n\n    //                if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {\n    //                    invalidType = input.constructor.name;\n    //                } else {\n    //                    invalidType = \"a \".concat(invalidType);\n    //                }\n    //            }\n\n    //            throw new TypeError(\"Expected string but received \".concat(invalidType, \".\"));\n    //        }\n    //    }\r\n\r\n    //    private  _typeof = (obj)=> {\n    //    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    //        this._typeof = function (obj) {\n    //            return typeof obj;\n    //        };\n    //    } else {\n    //        this._typeof = function (obj) {\n    //            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    //        };\n    //    }\n\n    //    return this._typeof(obj);\n    //}\r\n}"],"sourceRoot":""}